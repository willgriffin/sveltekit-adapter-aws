"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AWSAdapterStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_apigatewayv2_alpha_1 = require("@aws-cdk/aws-apigatewayv2-alpha");
const aws_apigatewayv2_integrations_alpha_1 = require("@aws-cdk/aws-apigatewayv2-integrations-alpha");
const dotenv_1 = require("dotenv");
class AWSAdapterStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        var _a, _b, _c;
        super(scope, id, props);
        const routes = ((_a = process.env.ROUTES) === null || _a === void 0 ? void 0 : _a.split(',')) || [];
        const projectPath = process.env.PROJECT_PATH;
        const serverPath = process.env.SERVER_PATH;
        const staticPath = process.env.STATIC_PATH;
        const prerenderedPath = process.env.PRERENDERED_PATH;
        const logRetention = parseInt(process.env.LOG_RETENTION_DAYS) || 7;
        const memorySize = parseInt(process.env.MEMORY_SIZE) || 128;
        const environment = (0, dotenv_1.config)({ path: projectPath });
        const [_, zoneName, ...MLDs] = ((_b = process.env.FQDN) === null || _b === void 0 ? void 0 : _b.split('.')) || [];
        const domainName = [zoneName, ...MLDs].join('.');
        this.serverHandler = new aws_cdk_lib_1.aws_lambda.Function(this, 'LambdaServerFunctionHandler', {
            code: new aws_cdk_lib_1.aws_lambda.AssetCode(serverPath),
            handler: 'index.handler',
            runtime: aws_cdk_lib_1.aws_lambda.Runtime.NODEJS_16_X,
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            memorySize,
            logRetention,
            environment: Object.assign({}, environment.parsed),
        });
        (_c = props === null || props === void 0 ? void 0 : props.serverHandlerPolicies) === null || _c === void 0 ? void 0 : _c.forEach((policy) => this.serverHandler.addToRolePolicy(policy));
        this.httpApi = new aws_apigatewayv2_alpha_1.HttpApi(this, 'API', {
            corsPreflight: {
                allowHeaders: ['*'],
                allowMethods: [aws_apigatewayv2_alpha_1.CorsHttpMethod.ANY],
                allowOrigins: ['*'],
                maxAge: aws_cdk_lib_1.Duration.days(1),
            },
            defaultIntegration: new aws_apigatewayv2_integrations_alpha_1.HttpLambdaIntegration('LambdaServerIntegration', this.serverHandler, {
                payloadFormatVersion: aws_apigatewayv2_alpha_1.PayloadFormatVersion.VERSION_1_0,
            }),
        });
        this.bucket = new aws_cdk_lib_1.aws_s3.Bucket(this, 'StaticContentBucket', {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
        });
        if (process.env.FQDN) {
            this.hostedZone = aws_cdk_lib_1.aws_route53.HostedZone.fromLookup(this, 'HostedZone', {
                domainName: process.env.ZONE_NAME || domainName,
            });
            this.certificate = new aws_cdk_lib_1.aws_certificatemanager.DnsValidatedCertificate(this, 'DnsValidatedCertificate', {
                domainName: process.env.FQDN,
                hostedZone: this.hostedZone,
                region: 'us-east-1',
            });
        }
        const distribution = new aws_cdk_lib_1.aws_cloudfront.Distribution(this, 'CloudFrontDistribution', {
            priceClass: aws_cdk_lib_1.aws_cloudfront.PriceClass.PRICE_CLASS_100,
            enabled: true,
            defaultRootObject: '',
            sslSupportMethod: aws_cdk_lib_1.aws_cloudfront.SSLMethod.SNI,
            domainNames: process.env.FQDN ? [process.env.FQDN] : [],
            certificate: process.env.FQDN
                ? aws_cdk_lib_1.aws_certificatemanager.Certificate.fromCertificateArn(this, 'DomainCertificate', this.certificate.certificateArn)
                : undefined,
            defaultBehavior: {
                compress: true,
                origin: new aws_cdk_lib_1.aws_cloudfront_origins.HttpOrigin(aws_cdk_lib_1.Fn.select(1, aws_cdk_lib_1.Fn.split('://', this.httpApi.apiEndpoint)), {
                    protocolPolicy: aws_cdk_lib_1.aws_cloudfront.OriginProtocolPolicy.HTTPS_ONLY,
                }),
                viewerProtocolPolicy: aws_cdk_lib_1.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
                allowedMethods: aws_cdk_lib_1.aws_cloudfront.AllowedMethods.ALLOW_ALL,
                originRequestPolicy: new aws_cdk_lib_1.aws_cloudfront.OriginRequestPolicy(this, 'OriginRequestPolicy', {
                    cookieBehavior: aws_cdk_lib_1.aws_cloudfront.OriginRequestCookieBehavior.all(),
                    queryStringBehavior: aws_cdk_lib_1.aws_cloudfront.OriginRequestQueryStringBehavior.all(),
                    headerBehavior: aws_cdk_lib_1.aws_cloudfront.OriginRequestHeaderBehavior.allowList('Origin', 'Accept-Charset', 'Accept', 'Access-Control-Request-Method', 'Access-Control-Request-Headers', 'Referer', 'Accept-Language', 'Accept-Datetime'),
                }),
                cachePolicy: aws_cdk_lib_1.aws_cloudfront.CachePolicy.CACHING_DISABLED,
            },
        });
        const s3Origin = new aws_cdk_lib_1.aws_cloudfront_origins.S3Origin(this.bucket, {});
        routes.forEach((route) => {
            distribution.addBehavior(route, s3Origin, {
                viewerProtocolPolicy: aws_cdk_lib_1.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
                allowedMethods: aws_cdk_lib_1.aws_cloudfront.AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
                originRequestPolicy: aws_cdk_lib_1.aws_cloudfront.OriginRequestPolicy.USER_AGENT_REFERER_HEADERS,
                cachePolicy: aws_cdk_lib_1.aws_cloudfront.CachePolicy.CACHING_OPTIMIZED,
            });
        });
        if (process.env.FQDN) {
            new aws_cdk_lib_1.aws_route53.ARecord(this, 'ARecord', {
                recordName: process.env.FQDN,
                target: aws_cdk_lib_1.aws_route53.RecordTarget.fromAlias(new aws_cdk_lib_1.aws_route53_targets.CloudFrontTarget(distribution)),
                zone: this.hostedZone,
            });
        }
        new aws_cdk_lib_1.aws_s3_deployment.BucketDeployment(this, 'StaticContentDeployment', {
            destinationBucket: this.bucket,
            sources: [aws_cdk_lib_1.aws_s3_deployment.Source.asset(staticPath), aws_cdk_lib_1.aws_s3_deployment.Source.asset(prerenderedPath)],
            retainOnDelete: false,
            prune: true,
            distribution,
            distributionPaths: ['/*'],
        });
        new aws_cdk_lib_1.CfnOutput(this, 'appUrl', {
            value: process.env.FQDN ? `https://${process.env.FQDN}` : `https://${distribution.domainName}`,
        });
        new aws_cdk_lib_1.CfnOutput(this, 'stackName', { value: id });
    }
}
exports.AWSAdapterStack = AWSAdapterStack;
//# sourceMappingURL=data:application/json;base64,